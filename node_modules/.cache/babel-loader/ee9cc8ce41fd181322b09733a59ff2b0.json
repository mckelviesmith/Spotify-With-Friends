{"ast":null,"code":"var _jsxFileName = \"/Users/mckelvie/Desktop/spotify-w-friends/cs4550-project-main 2/src/components/SongDetails/saveSongButton.js\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { useProfile } from \"../../contexts/profileContext\";\nimport { saveSong, unsaveSong } from \"../../actions/song-actions\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst SaveSongButton = _ref => {\n  _s();\n\n  let {\n    songId = '',\n    className = ''\n  } = _ref;\n  const dispatch = useDispatch();\n  const songSaved = useSelector(state => state.songSaved);\n  const btnStyle = `w-auto btn btn-info ${className}`;\n  const [currentUser, setCurrentUser] = useState();\n  const {\n    checkLoggedIn,\n    updateCurrentUser\n  } = useProfile();\n  useEffect(() => {\n    const check = async () => {\n      try {\n        const user = await checkLoggedIn();\n        setCurrentUser(user);\n      } catch (e) {\n        console.log(`Unable to run checkLoggedIn in FollowButton index.js: ${e}`);\n      }\n    };\n\n    check();\n  }, []);\n  useEffect(() => {\n    // Update initial state of saved song reducer value\n    if (currentUser) {\n      if (currentUser.songs.includes(songId)) {\n        saveSong(dispatch);\n      } else {\n        unsaveSong(dispatch);\n      }\n    }\n  }, [currentUser]);\n\n  const handleClick = () => {\n    if (songSaved) {\n      remove();\n    } else {\n      save();\n    }\n  };\n\n  const save = async () => {\n    try {\n      currentUser.songs.push(songId);\n\n      const perform = async () => {\n        await Promise.all([updateCurrentUser(currentUser), saveSong(dispatch)]);\n      };\n\n      perform();\n    } catch (e) {\n      console.log(`In saveSongButton.js, unable to perform save functionality: ${e}`);\n    }\n  };\n\n  const remove = () => {\n    try {\n      const updatedUser = { ...currentUser,\n        songs: currentUser.songs.filter(id => id !== songId)\n      };\n\n      const perform = async () => {\n        await Promise.all([updateCurrentUser(updatedUser), unsaveSong(dispatch), setCurrentUser(updatedUser)]);\n      };\n\n      perform();\n    } catch (e) {\n      console.log(`In saveSongButton.js, unable to perform unsave functionality: ${e}`);\n    }\n  };\n\n  if (currentUser) {\n    return /*#__PURE__*/_jsxDEV(\"button\", {\n      className: btnStyle,\n      onClick: handleClick,\n      children: [/*#__PURE__*/_jsxDEV(\"i\", {\n        className: `fa${songSaved && 's' || 'r'} fa-heart pe-1`\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 81,\n        columnNumber: 17\n      }, this), songSaved && 'Unsave' || 'Save']\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 80,\n      columnNumber: 13\n    }, this);\n  }\n\n  return null;\n};\n\n_s(SaveSongButton, \"qXsNMVKV1k07cdAL/4/2g9aCsEA=\", false, function () {\n  return [useDispatch, useSelector, useProfile];\n});\n\n_c = SaveSongButton;\nexport default SaveSongButton;\n\nvar _c;\n\n$RefreshReg$(_c, \"SaveSongButton\");","map":{"version":3,"sources":["/Users/mckelvie/Desktop/spotify-w-friends/cs4550-project-main 2/src/components/SongDetails/saveSongButton.js"],"names":["React","useEffect","useState","useDispatch","useSelector","useProfile","saveSong","unsaveSong","SaveSongButton","songId","className","dispatch","songSaved","state","btnStyle","currentUser","setCurrentUser","checkLoggedIn","updateCurrentUser","check","user","e","console","log","songs","includes","handleClick","remove","save","push","perform","Promise","all","updatedUser","filter","id"],"mappings":"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","sourcesContent":["import React, { useEffect, useState } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { useProfile } from \"../../contexts/profileContext\";\nimport { saveSong, unsaveSong } from \"../../actions/song-actions\";\n\nconst SaveSongButton = ({songId = '', className=''}) => {\n    const dispatch = useDispatch();\n    const songSaved = useSelector(state => state.songSaved);\n    const btnStyle = `w-auto btn btn-info ${className}`;\n    const [currentUser, setCurrentUser] = useState();\n    const { checkLoggedIn, updateCurrentUser } = useProfile();\n\n    useEffect(() => {\n        const check = async () => {\n            try {\n                const user = await checkLoggedIn();\n                setCurrentUser(user);\n            } catch (e) {\n                console.log(`Unable to run checkLoggedIn in FollowButton index.js: ${e}`);\n            }\n        }\n        check();\n    }, []);\n\n    useEffect(() => {\n        // Update initial state of saved song reducer value\n        if (currentUser) {\n            if (currentUser.songs.includes(songId)) {\n                saveSong(dispatch);\n            } else {\n                unsaveSong(dispatch);\n            }\n        }\n    }, [currentUser]);\n\n    const handleClick = () => {\n        if (songSaved) {\n            remove();\n        } else {\n            save();\n        }\n    };\n\n    const save = async () => {\n        try {\n            currentUser.songs.push(songId);\n            const perform = async () => {\n                await Promise.all([\n                    updateCurrentUser(currentUser),\n                    saveSong(dispatch)\n                ]);\n            };\n            perform();\n        } catch (e) {\n            console.log(`In saveSongButton.js, unable to perform save functionality: ${e}`);\n        }\n    };\n\n    const remove = () => {\n        try {\n            const updatedUser = {\n                ...currentUser,\n                songs: currentUser.songs.filter(id => id !== songId)\n            };\n            const perform = async () => {\n                await Promise.all([\n                    updateCurrentUser(updatedUser),\n                    unsaveSong(dispatch),\n                    setCurrentUser(updatedUser)\n                ]);\n            };\n            perform();\n        } catch (e) {\n            console.log(`In saveSongButton.js, unable to perform unsave functionality: ${e}`);\n        }\n    };\n\n    if (currentUser) {\n        return (\n            <button className={btnStyle} onClick={handleClick}>\n                <i className={`fa${(songSaved && 's') || 'r'} fa-heart pe-1`}></i>\n                {(songSaved && 'Unsave') || 'Save'}\n            </button>\n        );\n    }\n\n    return null;\n};\n\nexport default SaveSongButton;"]},"metadata":{},"sourceType":"module"}