{"ast":null,"code":"import axios from 'axios';\nconst API_URI = process.env.REACT_APP_LOCAL_API_URI || process.env.REACT_APP_REMOTE_API_URI;\nconst SONGS_API = `${API_URI}/songs`;\nexport const findSong = async id => {\n  const response = await axios.get(`${SONGS_API}/id/${id}`);\n  const song = parseTrack(response.data);\n  return song;\n};\nexport const searchForSongs = async query => {\n  const formattedQuery = query.toLowerCase().replaceAll(' ', '-');\n  const response = await axios.get(`${SONGS_API}/search/${formattedQuery}`);\n  const songs = parseSearchResults(response.data.tracks.items);\n  return songs;\n};\nexport const findSongsById = async function (songIds) {\n  let ordered = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n  const response = await axios.post(`${SONGS_API}/list`, {\n    songs: songIds,\n    ordered: ordered\n  });\n  const songs = parseSearchResults(response.data);\n  return songs;\n};\n\nconst parseTrack = track => {\n  const album = {\n    id: track.album.id,\n    name: track.album.name,\n    cover: track.album.images[0].url,\n    released: track.album.release_date\n  };\n  const artists = track.artists.map(a => {\n    return {\n      id: a.id,\n      name: a.name\n    };\n  }).slice(0, 3);\n  return {\n    id: track.id,\n    name: track.name,\n    artists: artists,\n    length_ms: track.duration_ms,\n    album: album,\n    explicit: track.explicit\n  };\n};\n\nconst parseSearchResults = songs => {\n  return songs.map(d => parseTrack(d));\n};","map":{"version":3,"sources":["/Users/mckelvie/Desktop/spotify-w-friends/cs4550-project-main 2/src/services/song-service.js"],"names":["axios","API_URI","process","env","REACT_APP_LOCAL_API_URI","REACT_APP_REMOTE_API_URI","SONGS_API","findSong","id","response","get","song","parseTrack","data","searchForSongs","query","formattedQuery","toLowerCase","replaceAll","songs","parseSearchResults","tracks","items","findSongsById","songIds","ordered","post","track","album","name","cover","images","url","released","release_date","artists","map","a","slice","length_ms","duration_ms","explicit","d"],"mappings":"AAAA,OAAOA,KAAP,MAAkB,OAAlB;AAEA,MAAMC,OAAO,GAAGC,OAAO,CAACC,GAAR,CAAYC,uBAAZ,IAAuCF,OAAO,CAACC,GAAR,CAAYE,wBAAnE;AACA,MAAMC,SAAS,GAAI,GAAEL,OAAQ,QAA7B;AAEA,OAAO,MAAMM,QAAQ,GAAG,MAAMC,EAAN,IAAY;AAChC,QAAMC,QAAQ,GAAG,MAAMT,KAAK,CAACU,GAAN,CAAW,GAAEJ,SAAU,OAAME,EAAG,EAAhC,CAAvB;AACA,QAAMG,IAAI,GAAGC,UAAU,CAACH,QAAQ,CAACI,IAAV,CAAvB;AACA,SAAOF,IAAP;AACH,CAJM;AAMP,OAAO,MAAMG,cAAc,GAAG,MAAMC,KAAN,IAAe;AACzC,QAAMC,cAAc,GAAGD,KAAK,CAACE,WAAN,GAAoBC,UAApB,CAA+B,GAA/B,EAAoC,GAApC,CAAvB;AACA,QAAMT,QAAQ,GAAG,MAAMT,KAAK,CAACU,GAAN,CAAW,GAAEJ,SAAU,WAAUU,cAAe,EAAhD,CAAvB;AACA,QAAMG,KAAK,GAAGC,kBAAkB,CAACX,QAAQ,CAACI,IAAT,CAAcQ,MAAd,CAAqBC,KAAtB,CAAhC;AACA,SAAOH,KAAP;AACH,CALM;AAOP,OAAO,MAAMI,aAAa,GAAG,gBAAOC,OAAP,EAAoC;AAAA,MAApBC,OAAoB,uEAAV,KAAU;AAC7D,QAAMhB,QAAQ,GAAG,MAAMT,KAAK,CAAC0B,IAAN,CAAY,GAAEpB,SAAU,OAAxB,EAAgC;AAACa,IAAAA,KAAK,EAAEK,OAAR;AAAiBC,IAAAA,OAAO,EAAEA;AAA1B,GAAhC,CAAvB;AACA,QAAMN,KAAK,GAAGC,kBAAkB,CAACX,QAAQ,CAACI,IAAV,CAAhC;AACA,SAAOM,KAAP;AACH,CAJM;;AAMP,MAAMP,UAAU,GAAGe,KAAK,IAAI;AACxB,QAAMC,KAAK,GAAG;AACVpB,IAAAA,EAAE,EAAEmB,KAAK,CAACC,KAAN,CAAYpB,EADN;AAEVqB,IAAAA,IAAI,EAAEF,KAAK,CAACC,KAAN,CAAYC,IAFR;AAGVC,IAAAA,KAAK,EAAEH,KAAK,CAACC,KAAN,CAAYG,MAAZ,CAAmB,CAAnB,EAAsBC,GAHnB;AAIVC,IAAAA,QAAQ,EAAEN,KAAK,CAACC,KAAN,CAAYM;AAJZ,GAAd;AAMA,QAAMC,OAAO,GAAGR,KAAK,CAACQ,OAAN,CAAcC,GAAd,CAAkBC,CAAC,IAAI;AACnC,WAAO;AACH7B,MAAAA,EAAE,EAAE6B,CAAC,CAAC7B,EADH;AAEHqB,MAAAA,IAAI,EAAEQ,CAAC,CAACR;AAFL,KAAP;AAIH,GALe,EAKbS,KALa,CAKP,CALO,EAKL,CALK,CAAhB;AAOA,SAAO;AACH9B,IAAAA,EAAE,EAAEmB,KAAK,CAACnB,EADP;AAEHqB,IAAAA,IAAI,EAAEF,KAAK,CAACE,IAFT;AAGHM,IAAAA,OAAO,EAAEA,OAHN;AAIHI,IAAAA,SAAS,EAAEZ,KAAK,CAACa,WAJd;AAKHZ,IAAAA,KAAK,EAAEA,KALJ;AAMHa,IAAAA,QAAQ,EAAEd,KAAK,CAACc;AANb,GAAP;AAQH,CAtBD;;AAwBA,MAAMrB,kBAAkB,GAAGD,KAAK,IAAI;AAChC,SAAOA,KAAK,CAACiB,GAAN,CAAUM,CAAC,IAAI9B,UAAU,CAAC8B,CAAD,CAAzB,CAAP;AACH,CAFD","sourcesContent":["import axios from 'axios';\n\nconst API_URI = process.env.REACT_APP_LOCAL_API_URI || process.env.REACT_APP_REMOTE_API_URI;\nconst SONGS_API = `${API_URI}/songs`;\n\nexport const findSong = async id => {\n    const response = await axios.get(`${SONGS_API}/id/${id}`);\n    const song = parseTrack(response.data);\n    return song;\n}\n\nexport const searchForSongs = async query => {\n    const formattedQuery = query.toLowerCase().replaceAll(' ', '-');\n    const response = await axios.get(`${SONGS_API}/search/${formattedQuery}`);\n    const songs = parseSearchResults(response.data.tracks.items);\n    return songs;\n}\n\nexport const findSongsById = async (songIds, ordered = false) => {\n    const response = await axios.post(`${SONGS_API}/list`, {songs: songIds, ordered: ordered});\n    const songs = parseSearchResults(response.data);\n    return songs;\n}\n\nconst parseTrack = track => {\n    const album = {\n        id: track.album.id,\n        name: track.album.name,\n        cover: track.album.images[0].url,\n        released: track.album.release_date,\n    };\n    const artists = track.artists.map(a => {\n        return {\n            id: a.id, \n            name: a.name,\n        }\n    }).slice(0,3);\n\n    return {\n        id: track.id,\n        name: track.name,\n        artists: artists,\n        length_ms: track.duration_ms,\n        album: album,\n        explicit: track.explicit\n    };\n};\n\nconst parseSearchResults = songs => {\n    return songs.map(d => parseTrack(d));\n};"]},"metadata":{},"sourceType":"module"}